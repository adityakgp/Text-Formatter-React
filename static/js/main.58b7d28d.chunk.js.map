{"version":3,"sources":["Components/Form.js","Components/Navbar.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","useState","text","setText","style","color","mode","heading","className","id","rows","value","onChange","event","target","backgroundColor","disabled","length","onClick","newuppercase","toUpperCase","showalert","newlowercase","toLowerCase","newalphaorder","split","sort","toString","navigator","clipboard","writeText","newtext","join","filter","element","Navbar","href","title","type","firstnav","togglemode","htmlFor","themetext","Alert","height","alert","role","word","lowerword","charAt","slice","capitalize","message","App","setmode","changethemetext","setchangethemetext","setalert","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.58b7d28d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Form(props) {\r\n  const upperCase = () => {\r\n    // console.log('upper case was clicked' + text);\r\n    // setText('you have clicked on upper case')\r\n    let newuppercase = text.toUpperCase();\r\n    setText(newuppercase);\r\n    props.showalert('Text Converted to upper case','success')\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log('on change');\r\n    setText(event.target.value);\r\n  };\r\n  const lowerCase = () => {\r\n    let newlowercase = text.toLowerCase();\r\n    setText(newlowercase);\r\n    props.showalert('Text Converted to lower case','success')\r\n  };\r\n  const alphaorder = () =>{\r\n    const newalphaorder=text.split(' ');\r\n    newalphaorder.sort();\r\n   setText(newalphaorder.toString());\r\n   props.showalert('Text orderd alphabetically','success')\r\n  }\r\n  const cleartext = ()=>{\r\n   let erase=('')\r\n    setText(erase);\r\n    props.showalert('Text cleared','warning')\r\n  }\r\n  const handleCopy = () => {\r\n    // var text = document.getElementById('mybox');\r\n    // text.select();\r\n    navigator.clipboard.writeText(text);\r\n    // document.getSelection().removeAllRanges();\r\n    props.showalert('Text copied','success')\r\n    }\r\n    const handleExtraSpaces = () => {\r\n      let newtext = text.split(/[ ]+/);\r\n      setText(newtext.join(' '));\r\n      props.showalert('Extra spaces removed','success')\r\n      }\r\n      // const numwords=(text)=>{\r\n      //   if(text.length >0){return text.trim().split(\"/\\s/\").length} else{return 0} \r\n      // }\r\n      \r\n  const [text, setText] = useState(\"Enter your text here\");\r\n  return (\r\n    <>\r\n    <div  style={{color :props.mode==='dark'?'white':'black'}}>\r\n    <div >\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"mybox\"\r\n          rows=\"10\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          style={{backgroundColor :props.mode==='dark'?'#5f2a2a':'white' , color : props.mode==='dark'?'white':'black'}}\r\n        ></textarea>\r\n        <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-2\" onClick={upperCase}>\r\n          Upper Case\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-2\" onClick={lowerCase}>\r\n          Lower Case\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-2\" onClick={alphaorder}>\r\n          Alphabetically \r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-2\" onClick={cleartext}>\r\n          Clear Text \r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-2\" onClick={handleCopy}>\r\n          Copy Text \r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-2\" onClick={handleExtraSpaces}>\r\n          Remove Extra Space\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div className=\"container\"> <h2> Your text has </h2>\r\n    <p>{text.length} characters   &  {text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words</p>\r\n    <p>Reading time for your text is {0.008 *  text.split(\" \").filter((element)=>{return element.length!==0}).length} minutes</p>\r\n    <h3>Preview</h3>\r\n    <p>{text.length===0?'To preview enter some text in the above text box' : text}</p>\r\n    </div>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { useState } from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n      </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                {props.firstnav}\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"\">\r\n                About\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-danger\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n           <div className={`form-check form-switch  text-${props.mode==='light'?'dark':'light'}`}>\r\n                       <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.themetext}</label> \r\n                 </div>\r\n                </div>\r\n            </div>\r\n        </nav> \r\n  );\r\n}\r\nNavbar.propTypes = { title: PropTypes.string, firstnav: PropTypes.string };\r\n","import React from 'react'\r\n\r\n\r\n\r\nexport default function Alert(props) {\r\n    const capitalize =(word)=>{\r\n            const lowerword= word.toLowerCase();\r\n            return lowerword.charAt(0).toUpperCase()+lowerword.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height : '70px'}}>\r\n        {/* // if props.alert is true then the code after runs if false than code after doesnot runs */}\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.message}\r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n// written function to capitalise the first letter os sucess because direct capitalising success in showalert would not take the value in the above js to make alert green","import \"./App.css\";\nimport About from \"./Components/About\";\nimport Form from \"./Components/Form\";\nimport Navbar from \"./Components/Navbar\";\nimport React, { useState } from 'react'\nimport Alert from \"./Components/Alert\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode] = useState('light')\n  const [changethemetext, setchangethemetext] = useState('Enable Red Mode')\n  const [alert, setalert] = useState(null)\n  const showalert =(message,type)=>{\n      setalert({\n        message : message,\n        type : type\n      })\n      setTimeout(() => {\n        setalert(null)\n      }, 2000);\n  }\n  const togglemode = ()=>{\n    if(mode == 'light'){\n      setmode('dark')\n      document.body.style.backgroundColor='#390a0a'\n      setchangethemetext('Disable Red Mode')\n      showalert('Red mode has been enabled','success')\n    }\n    else{\n      setmode('light')\n      document.body.style.backgroundColor='white'\n      setchangethemetext('Enable Red Mode')\n      showalert('Red mode has been disabled','success')\n    }\n  }\n\n  return (\n    <>\n    {/* <Router>\n      <Navbar title=\"Text Formatter\" firstnav=\"Home\" mode={mode}  togglemode={togglemode} themetext={changethemetext} />\n       <Alert alert={alert}/>\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/about\">\n            <About />                       always use exact path it is good habbit\n          </Route>\n          <Route exact path=\"/\">\n        <Form heading=\"Enter your text to convert it\" mode={mode} showalert={showalert} />\n          </Route>\n        </Switch>\n        </div>\n        </Router> */}\n        <Navbar title=\"Text Formatter\" firstnav='Home' mode={mode}  togglemode={togglemode} themetext={changethemetext} />\n       <Alert alert={alert}/>\n       <div className=\"container\">\n       <Form heading=\"Enter your text to convert it\" mode={mode} showalert={showalert} />\n       </div>\n       {/* <About />  */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}